program                     ->      declaration* EOF

declaration                 ->      class | function | variable | statement
class                       ->      "class" IDENTIFIER ( "expands" IDENTIFIER )? "{" 
                                        ( ( "pub"? IDENTIFIER ( "=" expression )? ";" )* )?
                                        ( ( "pub"? function )* )? 
                                    "}"
function                    ->      "fun" IDENTIFIER "(" parameters? ")" block
variable                    ->      "let" IDENTIFIER ( "=" expression )? ";"

statement                   ->      expression_statement | for | if | print | return | while | block
expression_statement        ->      expression ";"
for                         ->      "for" ( variable | expression_statement )? ";" expression? ";" expression? statement
if                          ->      "if" expression statement ( "else" statement )?
print                       ->      "print" expression ";"
return                      ->      "return" expression? ";"
while                       ->      "while" expression statement
block                       ->      "{" declaration* "}"

expression                  ->      assignment
assignment                  ->      ( call ".")? IDENTIFIER "=" assignment | logical_or
logical_or                  ->      logical_and ( "or" logical_and )*
logical_and                 ->      equality ( "and" equality )*
equality                    ->      comparison ( ( "!=" | "==" ) comparison )*
comparison                  ->      term ( ( ">" | ">=" | "<" | "<=" ) term )*
term                        ->      factor ( ( "-" | "+" | "<>" ) factor )*
factor                      ->      unary ( ( "/" | "*" ) unary )*
unary                       ->      ( "not" | "-" ) unary | call
call                        ->      primary ( "(" arguments? ")" | "." IDENTIFIER )*
primary                     ->      "true" | "false" | "nil" | "this" | NUMBER | STRING | IDENTIFIER | "(" expression ")" | "super" "." IDENTIFIER

parameters                  ->      IDENTIFIER ( "," IDENTIFIER )*
arguments                   ->      expression ( "," expression )*

NUMBER                      ->      DIGIT+ ( "." DIGIT+ )?
STRING                      ->      "\"" ^"\""* "\""
IDENTIFIER                  ->      ALPHA ( ALPHA | DIGIT )*
ALPHA                       ->      "a" ... "z" | "A" ... "Z" | "_"
DIGIT                       ->      "0" ... "9"